from qiskit.aqua.components.optimizers import SPSA,COBYLA,L_BFGS_B,NELDER_MEAD,P_BFGS,SLSQP


def getOptimiser(name="SPSA",params={}):
  optimiser=None
  if 'SPSA' in name:
  #max_trials (int) – Maximum number of iterations to perform.
  #save_steps (int) – Save intermeditate info every save_steps step.
  #last_avg (int) – Averged parameters over the last_avg iterations. If last_avg = 1, only the last iteration is considered.
  #c0 (float) – The initial a. Step size to update paramters.
  #c1 (float) – The initial c. The step size used to approximate gradient.
  #c2 (float) – The alpha in the paper, and it is used to adjust a (c0) at each iteration.
  #c3 (float) – The gamma in the paper, and it is used to adjust c (c1) at each iteration.
  #c4 (float) – The parameter used to control a as well.
  #skip_calibration (bool) – skip calibration and use provided c(s) as is.
    optimiser=SPSA(
            max_trials=params["max_trials"],
            save_steps=params["save_steps"],
    )
  elif 'COBYLA' in name:
  #maxiter (int) – Maximum number of function evaluations.
  #disp (bool) – Set to True to print convergence messages.
  #rhobeg (float) – Reasonable initial changes to the variables.
  #tol (float) – Final accuracy in the optimization (not precisely guaranteed). This is a lower bound on the size of the trust region.
    optimiser=COBYLA(
             maxiter=params["maxiter"],
             disp=True
            )
  elif 'L_BFGS_B' in name:
  #maxfun (int) – Maximum number of function evaluations.
  #maxiter (int) – Maximum number of iterations.
  #factr (float) – The iteration stops when (f^k - f^{k+1})/max{|f^k|, |f^{k+1}|,1} <= factr * eps, where eps is the machine precision, which is automatically generated by the code. Typical values for factr are: 1e12 for low accuracy; 1e7 for moderate accuracy; 10.0 for extremely high accuracy. See Notes for relationship to ftol, which is exposed (instead of factr) by the scipy.optimize.minimize interface to L-BFGS-B.
  #iprint (int) – Controls the frequency of output. iprint < 0 means no output; iprint = 0 print only one line at the last iteration; 0 < iprint < 99 print also f and |proj g| every iprint iterations; iprint = 99 print details of every iteration except n-vectors; iprint = 100 print also the changes of active set and final x; iprint > 100 print details of every iteration including x and g.
  #epsilon (float) – Step size used when approx_grad is True, for numerically calculating the gradient
    optimiser=L_BFGS_B(
             #maxfun=params["maxfun"],
             maxiter=params["maxiter"]
            )

  elif 'P_BFGS' in name:
    optimiser=P_BFGS(
              maxfun=params["maxfun"]
            )
  elif 'NELDER_MEAD' in name:
#maxiter (int) – Maximum allowed number of iterations. If both maxiter and maxfev are set, minimization will stop at the first reached.
#maxfev (int) – Maximum allowed number of function evaluations. If both maxiter and maxfev are set, minimization will stop at the first reached.
#disp (bool) – Set to True to print convergence messages.
#xatol (float) – Absolute error in xopt between iterations that is acceptable for convergence.
#tol (float or None) – Tolerance for termination.
#adaptive (bool) – Adapt algorithm parameters to dimensionality of problem.
    optimiser=NELDER_MEAD(
      maxiter=params["maxiter"],
      disp=True
    )
  elif 'SLSQP' in name:
  #maxiter (int) – Maximum number of iterations.
  #disp (bool) – Set to True to print convergence messages.
  #ftol (float) – Precision goal for the value of f in the stopping criterion.
  #tol (float or None) – Tolerance for termination.
  #eps (float) – Step size used for numerical approximation of the Jacobian.
    optimiser=SLSQP(
         maxiter=params["maxiter"]
            )

  print("Optimising with {0} - {1}".format(name,optimiser))
  return optimiser
